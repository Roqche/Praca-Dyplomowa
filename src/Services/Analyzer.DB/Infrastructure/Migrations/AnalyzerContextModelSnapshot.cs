// <auto-generated />
using System;
using Analyzer.DB.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Analyzer.DB.Infrastructure.Migrations
{
    [DbContext(typeof(AnalyzerContext))]
    partial class AnalyzerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.HasSequence("connector_used_in_project_hilo")
                .IncrementsBy(10);

            modelBuilder.HasSequence("project_hilo")
                .IncrementsBy(10);

            modelBuilder.Entity("Analyzer.DB.Model.ConnectorUsedInProject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "connector_used_in_project_hilo");

                    b.Property<int>("Connector")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ConnectorUsedInProject", (string)null);
                });

            modelBuilder.Entity("Analyzer.DB.Model.PipelineContext", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("PipelineContext", (string)null);
                });

            modelBuilder.Entity("Analyzer.DB.Model.PipelineExecution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ContextId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("ExecutionNumber")
                        .HasColumnType("int");

                    b.Property<int>("ProgrammerId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContextId");

                    b.HasIndex("ProgrammerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PipelineExecution", (string)null);
                });

            modelBuilder.Entity("Analyzer.DB.Model.Programmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Programmer", (string)null);
                });

            modelBuilder.Entity("Analyzer.DB.Model.ProgrammerWorkingTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("ProgrammerId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<double>("Time")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProgrammerWorkingTime", (string)null);
                });

            modelBuilder.Entity("Analyzer.DB.Model.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "project_hilo");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("Analyzer.DB.Model.SkippedLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("SkippedLogin", (string)null);
                });

            modelBuilder.Entity("Analyzer.DB.Model.SpecialMoment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "project_hilo");

                    b.Property<DateTime>("Appeared")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContextId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContextId");

                    b.HasIndex("ProjectId");

                    b.ToTable("SpecialMoment", (string)null);
                });

            modelBuilder.Entity("Analyzer.DB.Model.ConnectorUsedInProject", b =>
                {
                    b.HasOne("Analyzer.DB.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Analyzer.DB.Model.PipelineContext", b =>
                {
                    b.HasOne("Analyzer.DB.Model.Project", "Project")
                        .WithMany("PipelineContexts")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Analyzer.DB.Model.PipelineExecution", b =>
                {
                    b.HasOne("Analyzer.DB.Model.PipelineContext", "Context")
                        .WithMany("PipelinesExecutions")
                        .HasForeignKey("ContextId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Analyzer.DB.Model.Programmer", "Programmer")
                        .WithMany("PipelinesExecutions")
                        .HasForeignKey("ProgrammerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Analyzer.DB.Model.Project", "Project")
                        .WithMany("PipelinesExecutions")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Context");

                    b.Navigation("Programmer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Analyzer.DB.Model.Programmer", b =>
                {
                    b.HasOne("Analyzer.DB.Model.Project", "Project")
                        .WithMany("Programmers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Analyzer.DB.Model.ProgrammerWorkingTime", b =>
                {
                    b.HasOne("Analyzer.DB.Model.Programmer", "Programmer")
                        .WithMany("ProgrammerWorkingTimes")
                        .HasForeignKey("ProgrammerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Analyzer.DB.Model.Project", "Project")
                        .WithMany("ProgrammerWorkingTimes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Programmer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Analyzer.DB.Model.SkippedLogin", b =>
                {
                    b.HasOne("Analyzer.DB.Model.Project", "Project")
                        .WithMany("SkippedLogins")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Analyzer.DB.Model.SpecialMoment", b =>
                {
                    b.HasOne("Analyzer.DB.Model.PipelineContext", "Context")
                        .WithMany("SpecialMoments")
                        .HasForeignKey("ContextId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Analyzer.DB.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Context");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Analyzer.DB.Model.PipelineContext", b =>
                {
                    b.Navigation("PipelinesExecutions");

                    b.Navigation("SpecialMoments");
                });

            modelBuilder.Entity("Analyzer.DB.Model.Programmer", b =>
                {
                    b.Navigation("PipelinesExecutions");

                    b.Navigation("ProgrammerWorkingTimes");
                });

            modelBuilder.Entity("Analyzer.DB.Model.Project", b =>
                {
                    b.Navigation("PipelineContexts");

                    b.Navigation("PipelinesExecutions");

                    b.Navigation("ProgrammerWorkingTimes");

                    b.Navigation("Programmers");

                    b.Navigation("SkippedLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
